<html>
<head>
<title>Fly3D Guide - Files and File Formats</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../../fly-refes.css" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h1>Files and File Formats</h1>
<p><img src="../img/files.gif" width="400" height="275"></p>
<p>Fly3D designers have defined a big number of file formats that enclose different 
  types of useful data to be processed by the engine during scene loading and 
  the simulation. A technical description of each file format, enumerating every 
  piece of data inside them, is available in the 'util' folder in the Fly3D installation 
  directory. Here is a list of all file types and a comprehensive description 
  of each of them:</p>
<h2>Map File (.fmp)</h2>
<p>This is the raw scene information file type. It contains the 3D coordinates 
  of all the vertices and faces that compose the geometry of the scene, and is 
  the main data file used in the build process. A .fmp file should be produced 
  by a 3D modelling application.</p>
<h2>Entities File (.fen)</h2>
<p>This file contains information on all the scene entities: their position and 
  specific attributes. These 'entities' can be, for example, power-ups or light 
  sources. The .fen file is generated by the 3D modelling tool, and used in the 
  build process to generate the Fly3D scene file (.fly).</p>
<h2>BSP File (.bsp)</h2>
<p>This file format encloses the BSP tree itself. The data inside it is divided 
  into nodes, where each node can be an internal node (defining a portal that 
  divides the space between positive and negative) or a leaf node (which by definition 
  is a convex volume). This file is generated by the build process and is loaded 
  by the engine before the simulation starts.</p>
<h2>Lightmaps File (.lmp)</h2>
<p>This is the light maps data file. It encloses light map pictures that can have 
  any number of lightmaps inside them, and the lightmaps themselves. Light map 
  pictures must always be power of 2, and it is desired that they are square; 
  light maps, however, can be of any size. These files are produced in the build 
  process, and are loaded by the engine upon initialisation of a scene, to statically 
  illuminate the environment.</p>
<h2>Shaders File (.shr)</h2>
<p>This is the shaders information file. It stores any number of shaders with 
  its passes and the variable values for them. A .shr file is created by the build 
  process, storing shaders information from the scene's faces. A shader file is 
  also created upon exporting mesh files (.f3d and .k3d), defining shaders for 
  the mesh's materials. The shader files are loaded by the engine whenever its 
  corresponding scene or mesh object is loaded.</p>
<h2>Visibility File (.pvs)</h2>
<p>This is the visibility information file. It stores visibility flags between 
  all pairs of leaf nodes in the BSP. This file makes PVS culling possible during 
  the simulation. It is created by an algorithm inside the build process, and 
  is loaded upon initialising its corresponding scene file.</p>
<h2>Portals File (.fpt)</h2>
<p>This is the portals information file. In this context, portals are polygons 
  that link a pair of convex volumes (BSP leaf nodes). This data is needed by 
  the path-finding algorithm, making it possible for an entity to move from a 
  convex volume to another. The .fpt file is created by an algorithm inside the 
  building program, and is loaded together with its corresponding BSP file.</p>
<h2>Fly3D Scene File (.fly)</h2>
<p>This is the scene information file. It includes values for all the variables 
  of the engine, from global to plugin-specific data. Every entity present in 
  the scene must be included in the .fly file, with all its parameters. The .fly 
  file is created by the building process, from information in the .fen and .ctp 
  files. It is the main file opened by the front-ends, and includes a field called 
  'bspfile', referencing the BSP that should be loaded.</p>
<h2>Static and Vertex-Animated Mesh File (.f3d)</h2>
<p>This is one of the two file types that represent Fly3D mesh objects. A .f3d 
  file encloses a static (non-animated) or a vertex-animated mesh file, consisting 
  of an array of vertices, an array of faces and an array of vertices for each 
  animation key frame (if animated). This file is generated by a 3D modelling 
  tool and is loaded when any object using the mesh is inserted in the simulation.</p>
<h2>Bone-Animated Mesh File (.k3d)</h2>
<p>This is the second file type that represents mesh objects. A .k3d file encloses 
  a bone-animated mesh object, consisting of arrays of vertices, faces and bones, 
  and an array of bones matrices for each animation key frame. This file is generated 
  by a 3D modelling tool that supports skeletal animation, and is loaded when 
  any object using the mesh is inserted in the simulation.</p>
<h2>Class Templates File (.ctp)</h2>
<p></p>
<p>This is a template file that enumerates entities as they are inserted in the 
  scene by the 3D modelling tool. It is useful for mapping the tool's entites 
  to Fly3D objects, such as lights, power-ups, etc. It must be generated manually 
  when creating a new game template and is opened by the build program when converting 
  the entities enumerated in the .fen file.</p>
</body>
</html>
